plugins {
	id 'fabric-loom' version '0.9-SNAPSHOT'
	id 'maven-publish'
	id "com.github.johnrengelman.shadow" version "7.0.0"
}

import net.fabricmc.loom.task.RemapJarTask
sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

minecraft {
}

repositories {
	mavenCentral()
	jcenter()
	flatDir {
		dirs 'libs'
	}
	maven { url 'https://jitpack.io' }
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")
	System.out.println(project.buildForRelease)
	if (project.buildForRelease == "true") { // groovy is fucking retarded jesus christ
		System.out.println("Building for release!")
		//baritone for releases/builds (breaks in dev environment)
		modImplementation name: 'baritone-api-fabric-1.7.0'
		include name: 'baritone-api-fabric-1.7.0'
	} else {
		System.out.println("Building for indev!")
		//baritone-api for dev. Put the "baritone for dev.jar" in the run/mods folder.
		implementation name: 'baritone-api-1.7.0'
		include name: 'baritone-api-1.7.0'
	}
	implementation (include('com.github.19MisterX98.SeedcrackerX:seedcrackerx-api:e09c8bed96d233d53c6bf726252bed8be0c796cc')) {transitive = false}

	implementation(include("club.minnced:java-discord-rpc:2.0.1"))

	// https://mvnrepository.com/artifact/org.json/json
	implementation(group: 'org.json', name: 'json', version: '20210307')

	implementation(files("libs/woopraTrack.jar"))

}
shadowJar {
	dependencies {
		include(dependency(group: 'org.json', name: 'json', version: '20210307'))
		include(dependency(files("libs/woopraTrack.jar")))
	}
}

task remapShadow(type: RemapJarTask, dependsOn: shadowJar) {
	setInput(shadowJar.archiveFile)
	remapAccessWidener.set(true)
	addNestedDependencies.set(remapJar.addNestedDependencies)
}
processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

task execBuild(dependsOn: remapShadow) {
	doLast {
		file("./build/libs/atomic-1.0.0.jar").renameTo(file("./builds/latest.jar"))
	}
}

jar {
	from "LICENSE"
	manifest {
		attributes "Main-Class": "me.zeroX150.atomic.Main"
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(jar) {
				builtBy remapJar
			}
			artifact("${project.buildDir.absolutePath}/libs/${archivesBaseName}-${project.version}.jar"){
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}

